# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

skip_docs

# CONFIG VARIABLES
app_name          = 'ReactNativeBase'                 # Base application name used for .apk file
app_id_prefix     = 'com.reactnativebase'             # Base application identifier in Play Store
json_key          = ENV["JSON_KEYFILE"]               # Local path to keyfile used for authenticating with Play Store
s3_region         = ENV["AWS_REGION"]                 # AWS authentication params (for Adhoc builds) 
s3_key            = ENV["AWS_ACCESS_KEY_ID"]          #
s3_secret_key     = ENV["AWS_SECRET_ACCESS_KEY"]      #
s3_bucket         = ENV["BUILD_BUCKET"]               # AWS S3 bucket and folder to upload builds to (for Adhoc builds)   
s3_folder         = 'react-native-base'               # 
slack_url         = ENV["SLACK_URL"]                  # Slack webhook url and channel name for sending notifications upon completion
slack_channel     = ENV["SLACK_CHANNEL"]              #

lane :build do |options|
  # clean
  gradle(
    task: "clean"
  )
  # dependencies
  gradle(
    task: 'androidDependencies'
  )
  # build
  gradle(
    task: 'assemble',
    flavor: options[:flavor],
    build_type: 'Release',
  )
end

lane :publish_adhoc do |options|
  # get version number
  version = android_get_version_name+"."+android_get_version_code
  # get branch name
  branch = git_branch()
  # move .apk
  apk_location = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  sh(
      command: "mv #{apk_location} ../#{app_name}.apk"
  )
  # push to S3
  s3_path = s3_folder+"/android/"+branch+"-"+version+"/"
  aws_s3(
    access_key: s3_key,
    secret_access_key: s3_secret_key,
    bucket: s3_bucket,
    region: s3_region,
    apk: app_name+".apk",
    path: s3_path,
    acl: "private",
    upload_metadata: true
  )
  # Slack
  slack(
    message: "Hi! A new ad-hoc Android build has been uploaded for "+app_name+"-"+options[:flavor],
    payload: {
      "Build Date" => Time.new.to_s,
      "Version" => version,
      "S3 location" => "s3://"+s3_path,
      "HTTP link" => lane_context[SharedValues::S3_IPA_OUTPUT_PATH]
      },
    channel: slack_channel,
    slack_url: slack_url,
    use_webhook_configured_username_and_icon: true,
    fail_on_error: false,
    success: true
  )
end

lane :publish_appstore do |options|
  # get version number
  version = android_get_version_name+"."+android_get_version_code
  # push to play store
  upload_to_play_store(
    track: 'internal',
    json_key: json_key,
    package_name: app_id_prefix+options[:suffix]
  )
  # Slack
  slack(
    message: "Hi! A new Android build has been released to Play Store for "+app_name+"-"+options[:flavor],
    payload: {
      "Build Date" => Time.new.to_s,
      "Version" => version
    },
    channel: slack_channel,
    slack_url: slack_url,
    use_webhook_configured_username_and_icon: true,
    fail_on_error: false,
    success: true
  )
end

lane :debug_dev do
  build(flavor: 'Dev')
end

lane :debug_qa do
  build(flavor: 'Qa')
end

lane :debug_staging do
  build(flavor: 'Staging')
end

lane :debug_production do
  build(flavor: 'Prod')
end

lane :release_dev_s3 do
  build(flavor: 'Dev')
  publish_adhoc(flavor: 'Dev')
end

lane :release_qa_s3 do
  build(flavor: 'QA')
  publish_adhoc(flavor: 'QA')
end

lane :release_staging_s3 do
  build(flavor: 'Staging')
  publish_adhoc(flavor: 'Staging')
end

lane :release_prod_s3 do
  build(flavor: 'Prod')
  publish_adhoc(flavor: 'Prod')
end

lane :release_dev_appstore do
  build(flavor: 'Dev')
  publish_appstore(flavor: 'Dev', suffix: '.dev')
end

lane :release_qa_appstore do
  build(flavor: 'QA')
  publish_appstore(flavor: 'QA', suffix: '.qa')
end

lane :release_staging_appstore do
  build(flavor: 'Staging')
  publish_appstore(flavor: 'Staging', suffix: '.staging')
end

lane :release_prod_appstore do
  build(flavor: 'Prod')
  publish_appstore(flavor: 'Prod', suffix: '')
end
